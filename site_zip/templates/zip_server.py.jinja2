{#
 # Copyright (c) 2016-2017 Dustin Doloff
 # Licensed under Apache License v2.0
 #}

import argparse
import signal
import http.server
import socketserver
import sys
import threading
import zipfile

def perror(msg):
    sys.stderr.write(msg + '\n')
    sys.stderr.flush()

def shutdown_server(server):
    server.shutdown()
    perror('Server shut down')

def handler(signum, frame, server):
    threading.Thread(target=shutdown_server, args=[server]).start()

class ReuseAddrTCPServer(socketserver.TCPServer):
    allow_reuse_address = True

class ZipRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_HEAD(s):
        s.send_response(200)
        s.end_headers()

    def do_GET(self):
        try:
            info = self.server.zip.open(self.path[1:])
            self.send_response(200)
            self.end_headers()
            self.wfile.write(info.read())
        except KeyError:
            self.send_response(404)
            self.end_headers()
        return

def parse_args():
    parser = argparse.ArgumentParser(
            description='A local server, serving the contents of a zip file.')
    parser.add_argument('--host', type=str, default='''{{ host }}''',
            help='Override for the host name or IP address')
    parser.add_argument('--port', type=int, default={{ port }},
            help='Override for the port the server listens on')
    return parser.parse_args()

def main():
    args = parse_args()
    server = ReuseAddrTCPServer((args.host, args.port), ZipRequestHandler)
    server.zip = zipfile.ZipFile('''{{ zip }}''')

    for sig in (signal.SIGINT, signal.SIGTERM):
        signal.signal(sig, lambda signum, frame: handler(signum, frame, server))

    perror('Server starting...')
    server.serve_forever()

if __name__ == '__main__':
    main()
